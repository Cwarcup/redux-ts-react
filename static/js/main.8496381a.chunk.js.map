{"version":3,"sources":["state/action-types/index.ts","state/reducers/repositoriesReducer.ts","state/reducers/index.ts","state/store.ts","state/action-creators/index.ts","hooks/useTypeSelector.ts","components/RepositoriesList.tsx","hooks/useActions.ts","components/App.tsx","index.tsx"],"names":["ActionType","initialState","loading","error","data","reducer","state","action","type","SEARCH_REPOSITORIES","SEARCH_REPOSITORIES_SUCCESS","payload","SEARCH_REPOSITORIES_ERROR","reducers","combineReducers","repositories","repositoriesReducer","store","createStore","applyMiddleware","thunk","searchRepositories","term","dispatch","a","axios","get","params","text","names","objects","map","result","package","name","message","useTypedSelector","useSelector","RepositoriesList","useState","setTerm","useDispatch","bindActionCreators","actionCreators","useActions","onSubmit","event","preventDefault","value","onChange","e","target","App","ReactDOM","render","document","querySelector"],"mappings":"qMAAYA,E,gDAAAA,K,0CAAAA,E,0DAAAA,E,uDAAAA,M,KCSZ,IAAMC,EAAe,CACnBC,SAAS,EACTC,MAAO,KACPC,KAAM,IAmBOC,EAhBC,WAGS,IAFvBC,EAEsB,uDAFKL,EAC3BM,EACsB,uCACtB,OAAQA,EAAOC,MACb,KAAKR,EAAWS,oBACd,MAAO,CAAEP,SAAS,EAAMC,MAAO,KAAMC,KAAM,IAC7C,KAAKJ,EAAWU,4BACd,MAAO,CAAER,SAAS,EAAOC,MAAO,KAAMC,KAAMG,EAAOI,SACrD,KAAKX,EAAWY,0BACd,MAAO,CAAEV,SAAS,EAAOC,MAAOI,EAAOI,QAASP,KAAM,IACxD,QACE,OAAOE,IClBEO,EAJEC,YAAgB,CAC/BC,aAAcC,ICFHC,EAAQC,YAAYL,EAAU,GAAIM,YAAgBC,M,yCCClDC,EAAqB,SAACC,GACjC,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,6DACLD,EAAS,CACPf,KAAMR,EAAWS,sBAFd,kBAMoBgB,IAAMC,IAC3B,yCACA,CACEC,OAAQ,CACNC,KAAMN,KAVT,gBAMKlB,EANL,EAMKA,KASFyB,EAAQzB,EAAK0B,QAAQC,KAAI,SAACC,GAC9B,OAAOA,EAAOC,QAAQC,QAGxBX,EAAS,CACPf,KAAMR,EAAWU,4BACjBC,QAASkB,IArBR,kDAwBHN,EAAS,CACPf,KAAMR,EAAWY,0BACjBD,QAAS,KAAIwB,UA1BZ,0DAAP,uD,eCHWC,EAAoDC,I,OC6BlDC,EA5BoB,WACjC,MAAwBC,mBAAS,IAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACQnB,ECFgB,WACxB,IAAME,EAAWkB,cACjB,OAAOC,YAAmBC,EAAgBpB,GDAXqB,GAAvBvB,mBACR,EAAiCe,GAC/B,SAAC9B,GAAD,OAAWA,EAAMS,gBADXX,EAAR,EAAQA,KAAMD,EAAd,EAAcA,MAAOD,EAArB,EAAqBA,QAUrB,OACE,gCACE,uBAAM2C,SARO,SAACC,GAChBA,EAAMC,iBAEN1B,EAAmBC,IAKjB,UACE,uBAAO0B,MAAO1B,EAAM2B,SAAU,SAACC,GAAD,OAAOV,EAAQU,EAAEC,OAAOH,UACtD,+CAED7C,GAAS,6BAAKA,IACdD,GAAW,6CACVC,IAAUD,GACVE,EAAK2B,KAAI,SAACG,GAAD,OAAU,8BAAiBA,GAAPA,UEXtBkB,EAXH,WACV,OACE,cAAC,IAAD,CAAUnC,MAAOA,EAAjB,SACE,gCACE,sDACA,cAAC,EAAD,UCNRoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.8496381a.chunk.js","sourcesContent":["export enum ActionType {\n  SEARCH_REPOSITORIES = 'search_repositories',\n  SEARCH_REPOSITORIES_SUCCESS = 'search_repositories_success',\n  SEARCH_REPOSITORIES_ERROR = 'search_repositories_error',\n}\n","import { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\ninterface RepositoriesState {\n  loading: boolean;\n  error: string | null;\n  data: string[];\n}\n\nconst initialState = {\n  loading: false,\n  error: null,\n  data: [],\n};\n\nconst reducer = (\n  state: RepositoriesState = initialState,\n  action: Action\n): RepositoriesState => {\n  switch (action.type) {\n    case ActionType.SEARCH_REPOSITORIES:\n      return { loading: true, error: null, data: [] };\n    case ActionType.SEARCH_REPOSITORIES_SUCCESS:\n      return { loading: false, error: null, data: action.payload };\n    case ActionType.SEARCH_REPOSITORIES_ERROR:\n      return { loading: false, error: action.payload, data: [] };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport repositoriesReducer from './repositoriesReducer';\n\n// state is an object with a repositories key\n// and a value from the repositoriesReducer\nconst reducers = combineReducers({\n  repositories: repositoriesReducer,\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n// we now have a type that represents the data in our store.\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\nexport const searchRepositories = (term: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES,\n    });\n\n    try {\n      const { data } = await axios.get(\n        'https://registry.npmjs.org/-/v1/search',\n        {\n          params: {\n            text: term,\n          },\n        }\n      );\n\n      const names = data.objects.map((result: any) => {\n        return result.package.name;\n      });\n\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names,\n      });\n    } catch (err: any) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../state/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypeSelector';\nimport { useActions } from '../hooks/useActions';\n\nconst RepositoriesList: React.FC = () => {\n  const [term, setTerm] = useState('');\n  const { searchRepositories } = useActions();\n  const { data, error, loading } = useTypedSelector(\n    (state) => state.repositories\n  );\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    searchRepositories(term);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input value={term} onChange={(e) => setTerm(e.target.value)} />\n        <button>Search</button>\n      </form>\n      {error && <h3>{error}</h3>}\n      {loading && <h3>Loading...</h3>}\n      {!error && !loading && \n        data.map((name) => <div key={name}>{name}</div>)\n        }\n    </div>\n  );\n};\n\nexport default RepositoriesList;\n","import { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n  return bindActionCreators(actionCreators, dispatch);\n};\n\n//bindAction creators will return an object with all the action creators.\n","import { Provider } from 'react-redux';\nimport { store } from '../state';\nimport RepositoriesList from './RepositoriesList';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div>\n        <h1>Search For a Package</h1>\n        <RepositoriesList />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}